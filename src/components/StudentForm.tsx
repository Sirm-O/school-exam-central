import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { User, Phone, MapPin, Briefcase } from "lucide-react";

const studentSchema = z.object({
  student_name: z.string().min(1, "Student name is required"),
  class_id: z.string().min(1, "Class is required"),
  stream_id: z.string().optional(),
  parent_name: z.string().min(1, "Parent name is required"),
  parent_phone: z.string().min(10, "Phone number must be at least 10 digits"),
  parent_address: z.string().optional(),
  parent_occupation: z.string().optional(),
  enrollment_date: z.string().min(1, "Enrollment date is required"),
});

type StudentFormValues = z.infer<typeof studentSchema>;

interface Class {
  id: string;
  name: string;
}

interface Stream {
  id: string;
  name: string;
  class_id: string;
}

export function StudentForm({ onClose, onStudentAdded }: { onClose: () => void; onStudentAdded: () => void }) {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [classes, setClasses] = useState<Class[]>([]);
  const [streams, setStreams] = useState<Stream[]>([]);
  const [selectedClassId, setSelectedClassId] = useState<string>("");

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<StudentFormValues>({
    resolver: zodResolver(studentSchema),
  });

  const watchedClassId = watch("class_id");

  useEffect(() => {
    fetchClasses();
  }, []);

  useEffect(() => {
    if (watchedClassId) {
      setSelectedClassId(watchedClassId);
      fetchStreams(watchedClassId);
    }
  }, [watchedClassId]);

  const fetchClasses = async () => {
    try {
      const { data, error } = await supabase
        .from('classes')
        .select('id, name')
        .order('name');

      if (error) throw error;
      setClasses(data || []);
    } catch (error) {
      console.error('Error fetching classes:', error);
    }
  };

  const fetchStreams = async (classId: string) => {
    try {
      const { data, error } = await supabase
        .from('streams')
        .select('id, name, class_id')
        .eq('class_id', classId)
        .order('name');

      if (error) throw error;
      setStreams(data || []);
    } catch (error) {
      console.error('Error fetching streams:', error);
    }
  };

  const onSubmit = async (data: StudentFormValues) => {
    setLoading(true);
    try {
      // First, create parent info record
      const { data: parentData, error: parentError } = await supabase
        .from('parent_info')
        .insert([{
          name: data.parent_name,
          phone_number: data.parent_phone,
          address: data.parent_address || null,
          occupation: data.parent_occupation || null,
        }])
        .select()
        .single();

      if (parentError) throw parentError;

      // Create user profile for phone-based authentication
      const { data: userData, error: userError } = await supabase.auth.signUp({
        email: `${data.parent_phone}@tempmail.com`, // Temporary email format
        password: 'temppassword123',
        options: {
          data: {
            full_name: data.student_name,
            role: 'student',
            phone_number: data.parent_phone
          }
        }
      });

      if (userError) throw userError;

      // Then create student record (student_id will be auto-generated by trigger)
      const { error: studentError } = await supabase
        .from('students')
        .insert([{
          student_name: data.student_name,
          user_id: userData.user!.id,
          class_id: data.class_id,
          stream_id: data.stream_id || null,
          parent_id: parentData.id,
          enrollment_date: data.enrollment_date,
          student_id: '', // This will trigger auto-generation
        }]);

      if (studentError) throw studentError;

      toast({
        title: "Success",
        description: "Student added successfully with auto-generated ID",
      });

      onStudentAdded();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to add student",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Student Information */}
      <Card className="glass border-primary/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-primary">
            <User className="h-5 w-5" />
            Student Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="student_name">Student Name</Label>
              <Input
                id="student_name"
                placeholder="Enter student full name"
                className="bg-muted/50 border-primary/20"
                {...register("student_name")}
              />
              {errors.student_name && (
                <p className="text-sm text-destructive">{errors.student_name.message}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="class_id">Class</Label>
                <Select onValueChange={(value) => setValue("class_id", value)}>
                  <SelectTrigger className="bg-muted/50 border-primary/20">
                    <SelectValue placeholder="Select a class" />
                  </SelectTrigger>
                  <SelectContent>
                    {classes.map((cls) => (
                      <SelectItem key={cls.id} value={cls.id}>
                        {cls.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.class_id && (
                  <p className="text-sm text-destructive">{errors.class_id.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="stream_id">Stream (Optional)</Label>
                <Select onValueChange={(value) => setValue("stream_id", value)}>
                  <SelectTrigger className="bg-muted/50 border-primary/20">
                    <SelectValue placeholder="Select a stream" />
                  </SelectTrigger>
                  <SelectContent>
                    {streams.map((stream) => (
                      <SelectItem key={stream.id} value={stream.id}>
                        {stream.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="enrollment_date">Enrollment Date</Label>
              <Input
                id="enrollment_date"
                type="date"
                className="bg-muted/50 border-primary/20"
                {...register("enrollment_date")}
              />
              {errors.enrollment_date && (
                <p className="text-sm text-destructive">{errors.enrollment_date.message}</p>
              )}
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Parent Information */}
      <Card className="glass border-secondary/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-secondary">
            <Phone className="h-5 w-5" />
            Parent Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="parent_name">Parent Name *</Label>
            <Input
              id="parent_name"
              placeholder="Enter parent full name"
              className="bg-muted/50 border-secondary/20"
              {...register("parent_name")}
            />
            {errors.parent_name && (
              <p className="text-sm text-destructive">{errors.parent_name.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="parent_phone">Phone Number * (Used for login)</Label>
            <Input
              id="parent_phone"
              placeholder="Enter parent phone number"
              className="bg-muted/50 border-secondary/20"
              {...register("parent_phone")}
            />
            {errors.parent_phone && (
              <p className="text-sm text-destructive">{errors.parent_phone.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="parent_address">Address</Label>
            <Textarea
              id="parent_address"
              placeholder="Enter home address (optional)"
              className="bg-muted/50 border-secondary/20"
              {...register("parent_address")}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="parent_occupation">Occupation</Label>
            <Input
              id="parent_occupation"
              placeholder="Enter parent occupation (optional)"
              className="bg-muted/50 border-secondary/20"
              {...register("parent_occupation")}
            />
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end gap-2">
        <Button variant="outline" onClick={onClose} disabled={loading} className="border-muted">
          Cancel
        </Button>
        <Button 
          onClick={handleSubmit(onSubmit)} 
          disabled={loading}
          className="bg-gradient-primary hover:opacity-90"
        >
          {loading ? "Adding..." : "Add Student"}
        </Button>
      </div>
    </div>
  );
}